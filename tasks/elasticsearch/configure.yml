---

# Gen s3 bucket policy for the expire
- name: "Generate s3bucket policy file"
  template: src=s3/lifecycle.json.j2 dest=/var/tmp/s3_backup_policy.json mode=0644
  register: s3_policy
  run_once: true
  delegate_to: 127.0.0.1

# Apply the s3 policy
# For this command, ensure the ssh user have access to s3 bucket
- name: "Apply s3 backup lifecycle policy on the s3 bucket {{ backup_es_bucket_name }}"
  command: /usr/local/bin/aws s3api put-bucket-lifecycle --bucket {{ backup_es_bucket_name }}  --lifecycle-configuration file:///var/tmp/s3_backup_policy.json
  run_once: true
  delegate_to: 127.0.0.1

- name: "Add elasticsearch backup script /usr/bin/elasticsearch-backup.sh"
  template: src=elasticsearch/elasticsearch-backup.sh.j2 dest=/usr/bin/elasticsearch-backup.sh owner=root group=root mode=0755

- name: "Add elasticsearch repository creation script /usr/bin/elasticsearch-create-backup-repository.sh"
  template: src=elasticsearch/elasticsearch-create-backup-repository.sh.j2 dest=/usr/bin/elasticsearch-create-backup-repository.sh owner=root group=root mode=0755

# Configure backups
- name: "ES repository {{ backup_es_repository_name }} exist ?"
  uri: >
    url="http://{{ backup_es_host }}:{{ backup_es_port }}/_snapshot/{{ backup_es_repository_name }}"
    method=GET
    status_code=200
  ignore_errors: True
  register: backup_es_repository_status

- name: "Create ES repository {{ backup_es_repository_name }}"
  command: /usr/bin/elasticsearch-create-backup-repository.sh
  when: backup_es_repository_status|failed

# Add cron comands
- name: "cron add snapshot and retention commands"
  cron: >
    name="{{ item.name | default(default_backup_es_cron.name) }}"
    job="{{ item.job | default(default_backup_es_cron.job) }}"
    minute="{{ item.minute | default(default_backup_es_cron.minute) }}"
    hour="{{ item.hour | default(default_backup_es_cron.hour) }}"
    day="{{ item.day | default(default_backup_es_cron.day) }}"
    month="{{ item.month | default(default_backup_es_cron.month) }}"
    weekday="{{ item.weekday | default(default_backup_es_cron.weekday) }}"
    cron_file="{{ item.file | default(default_backup_es_cron.cron_file) }}"
    user="{{ item.user | default(default_backup_es_cron.user) }}"
    state="{{ item.state | default(default_backup_es_cron.state) }}"
  with_items:
    - "{{ backup_es_cron }}"
  sudo: yes 

